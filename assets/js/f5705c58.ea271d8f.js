"use strict";(self.webpackChunkgugol=self.webpackChunkgugol||[]).push([[182],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>b});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},_="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),_=u(n),c=r,b=_["".concat(s,".").concat(c)]||_[c]||p[c]||o;return n?i.createElement(b,l(l({ref:t},m),{},{components:n})):i.createElement(b,l({ref:t},m))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[_]="string"==typeof e?e:r,l[1]=a;for(var u=2;u<o;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4256:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>_,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var i=n(7462),r=(n(7294),n(3905));const o={},l="Aritmeti\u010dno kodiranje",a={unversionedId:"multimedija/Aritmetic_encoding",id:"multimedija/Aritmetic_encoding",title:"Aritmeti\u010dno kodiranje",description:"Aritmeticni kodirnik se v multimediji pogosto uporablja pri brezizgubnem stiskanju podatkovnih slik, zvoka in teksta.",source:"@site/docs/multimedija/Aritmetic_encoding.md",sourceDirName:"multimedija",slug:"/multimedija/Aritmetic_encoding",permalink:"/ThreeJS_VR_app_quickstart/docs/multimedija/Aritmetic_encoding",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Multimedija",permalink:"/ThreeJS_VR_app_quickstart/docs/category/multimedija"}},s={},u=[{value:"Un\u010dinkovitost stiskanja",id:"un\u010dinkovitost-stiskanja",level:3}],m={toc:u};function _(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,i.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aritmeti\u010dno-kodiranje"},"Aritmeti\u010dno kodiranje"),(0,r.kt)("p",null,"Aritmeticni kodirnik se v multimediji pogosto uporablja pri brezizgubnem stiskanju podatkovnih slik, zvoka in teksta.\nGre za matemati\u010dno dokazano najbolj un\u010dikovito kodiranje \u010de se omejimo le na simbole velikosti 8 bitov.\nVeliko bolj so un\u010dikovito stiskanje dosezemo z zip, ki pa hrani bistveno dalj\u0161e simbole. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Kodiranje datoteke opravljamo v naslednjih korakih.")),(0,r.kt)("p",null,"Korak 1. \u0161tetje simbolov"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    //create table storing all symbols\n    let mut table_frequency:[u64;ENCODER_SYMBOL_TABLE_SIZE] = [0;ENCODER_SYMBOL_TABLE_SIZE];\n    let mut table_lower_limit:[u64;ENCODER_SYMBOL_TABLE_SIZE] = [0;ENCODER_SYMBOL_TABLE_SIZE];\n    let mut table_upper_limit:[u64;ENCODER_SYMBOL_TABLE_SIZE] = [0;ENCODER_SYMBOL_TABLE_SIZE];\n\n    //println!("{:?}bit encoder {:?} posible symbols",ENCODER_BITS,ENCODER_SYMBOL_TABLE_SIZE);\n    let mut buff:[u8;8] = [0;8]; //usize has 8 bytes\n\n    //println!("Counting ocuurances...");\n    //f_in.filestram.seek(SeekFrom::Start(0)).expect("cant find the start of the file");\n    let mut ocuured_symbols: Vec<usize> = Vec::new();\n    let mut max_ocurrances: u64 = 0;\n    let mut frequency_bits: usize = 0;\n    {\n        let mut f_in:BinFile = BinFile::new_read(filename_in);\n        loop {\n            let res:usize = f_in.read_n_be_bits_to_8_byte_buff(&ENCODER_SYMBOL_BITS, &mut buff, true);\n            if res < 1 {break;}\n            let symbol:usize = usize::from_be_bytes(buff);\n\n            //DEBUG\n            //println!("symbol:{:?}",symbol);\n\n            if table_frequency[symbol] == 0 { ocuured_symbols.push(symbol); }\n            table_frequency[symbol] += 1;\n            if table_frequency[symbol] > max_ocurrances {max_ocurrances = table_frequency[symbol];}\n        }\n        max_ocurrances = max_ocurrances-1;\n        let mut max: u64 = max_ocurrances;\n        while max != 0 {\n            max = max/2;\n            frequency_bits += 1;\n        }\n        //println!("max num of ocurrances: {:?} can be stored in {:?} bits",max_ocurrances,frequency_bits);\n    }\n')),(0,r.kt)("p",null,"korak 2. hranimo pojavitve v glavo stisjene datoteke"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    //write file header\n    //frequency_bits = the smallest posible number of bits representing the max frequency\n    //freqency 0 is frequency 1 becuse we dont write symbols in the header with frequency of 0\n\n    f_encoded.write_n_bits_from_be_buff(&8, & frequency_bits.to_be_bytes());\n    f_encoded.write_n_bits_from_be_buff(&ENCODER_SYMBOL_BITS, & (ocuured_symbols.len()-1).to_be_bytes());\n\nGlava datoteke je sestvljena naslednje. Najprej zapisemo 8 bitov ki predstavljajo vrednost F. F nam pove z koliko\nbitov zapisujemo stevila pojavitev v glavi. Nato z F biti zapisemo stevilo simbolov, ki jih enkodiramo.\nNa koncu sledi zapis vseh 8bitnih simbolov z F bitnim stevilom pojavitev.\n\nF = [8](stevilo bitov potrebnih za zapis pojavitev simbola)\nN = [F](koliko simbolov imamo zapisanih v glavi)\nsimbol_1 = [8](simbol) + [F](stevilo pojavitev simbola zapisan z F biti)\n...\nsimbol_n = [8](simbol) + [F](stevilo pojavitev simbola zapisan z F biti)\n")),(0,r.kt)("p",null,"korak 3. pridobi zgornjo in spodnjo mejo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    //calculate lower and upper limit\n    let mut lower_limit:u64 = 0;\n    let mut upper_limit:u64 = 0;\n\n    for i in &ocuured_symbols{\n        f_encoded.write_n_bits_from_be_buff(&ENCODER_SYMBOL_BITS, &i.to_be_bytes()); //symbol\n        f_encoded.write_n_bits_from_be_buff(&frequency_bits, &(table_frequency[*i]-1).to_be_bytes()); //frequency of that symbol\n\n        upper_limit = lower_limit+table_frequency[*i];\n\n        table_lower_limit[*i] = lower_limit;\n        table_upper_limit[*i] = upper_limit;\n\n        lower_limit = upper_limit;\n    }\n")),(0,r.kt)("p",null,"korak 4. iniciliziraj enkodiranje"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"    //inicilize encoding\n    let cumulative_frequency:u64 = upper_limit.clone(); \n    lower_limit = 0;\n    upper_limit = 2_u64.pow(ENCODER_BITS as u32 -1)-1;\n    let second_fourth:u64 = (upper_limit+1)/2;\n    let first_fourth:u64 = second_fourth/2;\n    let third_fourth:u64 = first_fourth *3;\n    let mut e3_counter:u64 = 0;\n")),(0,r.kt)("p",null,"korak 5. kodiraj znake z huffmanovimi kodami"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'    let mut f_in:BinFile = BinFile::new_read(filename_in);\n    loop {\n        let res:usize = f_in.read_n_be_bits_to_8_byte_buff(&ENCODER_SYMBOL_BITS, &mut buff, true);\n        if res < 1 {break;}\n        let symbol:usize = usize::from_be_bytes(buff);\n        let symbol_low:u64 = table_lower_limit[symbol];\n        let symbol_high:u64 = table_upper_limit[symbol];\n        let step:u64 = (upper_limit-lower_limit+1)/cumulative_frequency;\n        let step_L:u64 = ((upper_limit-lower_limit+1)*symbol_low)/cumulative_frequency;\n        let step_H:u64 = ((upper_limit-lower_limit+1)*symbol_high)/cumulative_frequency;\n        //print!("symbol:{:?} H:{:?} L{:?} step:{:?} ",symbol,symbol_high,symbol_low,step);\n\n        upper_limit = lower_limit + (step * symbol_high) - 1;\n        lower_limit = lower_limit + step * symbol_low;\n\n        //DEBUG\n        //print!("lim(H:{:?} L:{:?}) ",upper_limit,lower_limit);\n\n        while upper_limit < second_fourth || lower_limit >= second_fourth {\n            if upper_limit < second_fourth {\n                lower_limit = lower_limit*2;\n                upper_limit = (upper_limit*2)+1;\n                f_encoded.write_bit(0); //encoded_bits += "0";\n                //print!("E1(L:{:?}H:{:?}) ",lower_limit,upper_limit);\n                for _ in 0..e3_counter {f_encoded.write_bit(1); /*encoded_bits += "1";*/}\n                e3_counter = 0;\n            }\n            if lower_limit >= second_fourth {\n                lower_limit = 2 * (lower_limit - second_fourth);\n                upper_limit = 2 * (upper_limit - second_fourth) + 1;\n                f_encoded.write_bit(1);//encoded_bits += "1";\n                //print!("E2(L:{:?}H:{:?}) ",lower_limit,upper_limit);\n                for _ in 0..e3_counter {f_encoded.write_bit(0); /*encoded_bits += "0";*/}\n                e3_counter = 0;\n            }\n        }\n        while lower_limit >= first_fourth && upper_limit < third_fourth {\n            lower_limit = 2 * (lower_limit - first_fourth);\n            upper_limit = 2 * (upper_limit - first_fourth) + 1;\n            //print!("E3(L:{:?}H:{:?}) ",lower_limit,upper_limit);\n            e3_counter += 1;\n            \n        }\n    }\n    if lower_limit < first_fourth {\n        f_encoded.write_bit(0); //encoded_bits += "0";\n        f_encoded.write_bit(1); //encoded_bits += "1";\n        for _ in 0..e3_counter {f_encoded.write_bit(1); /*encoded_bits += "1";*/}\n    }\n    else {\n        f_encoded.write_bit(1); //encoded_bits += "1";\n        f_encoded.write_bit(0); //encoded_bits += "0";\n        for _ in 0..e3_counter {f_encoded.write_bit(0); /*encoded_bits += "1";*/}\n    }\n    f_encoded.file_close();\n')),(0,r.kt)("h3",{id:"un\u010dinkovitost-stiskanja"},"Un\u010dinkovitost stiskanja"),(0,r.kt)("p",null,"Un\u010dinkovitost kodiranja smo preiskusili nad naslednjimi datotekami:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Datoteka"),(0,r.kt)("th",{parentName:"tr",align:null},"velikost nestisjena"),(0,r.kt)("th",{parentName:"tr",align:null},"velikost stisjena"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alice30.txt"),(0,r.kt)("td",{parentName:"tr",align:null},"145.1 KiB"),(0,r.kt)("td",{parentName:"tr",align:null},"82.0 KiB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"assassin.wav"),(0,r.kt)("td",{parentName:"tr",align:null},"282.1 KiB"),(0,r.kt)("td",{parentName:"tr",align:null},"146.0 KiB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lena.bmp"),(0,r.kt)("td",{parentName:"tr",align:null},"2.1 MiB"),(0,r.kt)("td",{parentName:"tr",align:null},"1.8 MiB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lorem.txt"),(0,r.kt)("td",{parentName:"tr",align:null},"38.7 KiB"),(0,r.kt)("td",{parentName:"tr",align:null},"20.0 KiB")))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"moc stiskanja",src:n(6532).Z,width:"600",height:"371"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"cas stiskanja",src:n(2072).Z,width:"600",height:"371"})))}_.isMDXComponent=!0},6532:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/Mo\u010d_stiskanja-94c1af2cbc1fa4e732acc236334870b8.png"},2072:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/encoding_in_decoding_cas_v_ms-fc65e8cb2350bd4770237aceb20b6e7c.png"}}]);